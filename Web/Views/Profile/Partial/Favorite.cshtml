@using Core.Services
@using Infrastructure.Usecase.Models
@using Core.Entities.References
@using Core.Extension
@using Core.Model
@using Core.Model.Parameters
@model Core.Entities.Users.User
@inject ISneakerReferenceService Service
@inject IQueryBuilder Builder

<div class="row section-content" id="favorite-content">
	<h3>FAVORITE SNEAKERS</h3>
	@{
		if (Model?.UniqueID != null)
		{
			var favoriteSneakers = new FilteredModel<SneakerReference>(Builder, Service);
			favoriteSneakers.AddHiddenFilterGroup("uniqueid").AssignParameters(Model.Liked ?? new[] {"-"});
			await favoriteSneakers.FetchPageAsync(1);
			<div class="@($"products-view { Model.Settings.LayoutView.GetEnumMemberValue() }")">
				@{ await Html.RenderPartialAsync("../Shop/Partial/ReferencesPartial", favoriteSneakers); }
			</div>
			await Html.RenderPartialAsync("_PagedPartial", favoriteSneakers);
		}
	}
</div>