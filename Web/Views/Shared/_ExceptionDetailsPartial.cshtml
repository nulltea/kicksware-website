@using System.Reflection
@using System.Text.RegularExpressions
@model Exception

@{
	const string previousStackEnd = "--- End of stack trace from previous location where exception was thrown ---\r";
}

@functions
{
	string HtmlEncodeAndReplaceLineBreaks(string input)
	{
		if (string.IsNullOrEmpty(input))
		{
			return string.Empty;
		}

		return string.Join("<br />" + Environment.NewLine, input.Split(new[] {"\r\n"}, StringSplitOptions.None).SelectMany(s => s.Split(new[] {'\r', '\n'}, StringSplitOptions.None)).Select(HtmlEncoder.Encode));
	}

	static bool TryFindSource(string call, out string url)
	{
		url = null;
		try
		{
			if (!call.Contains(" in "))
			{
				return false;
			}

			if (!int.TryParse(Regex.Match(call, "(?<=:line)(.*)$").Value.Trim(), out var line))
			{
				return false;
			}

			var begin = Core.Environment.Environment.Development
				? @"[\/\\]kicksware-platform[\/\\]web-app[\/\\]"
				: @"[\/\\]src[\/\\]";

			var match = Regex.Match(call, $"{begin}(.*):line {line}");

			if (match.Success && match.Groups.Count > 0)
			{
				var path = match.Groups[1].Value.Trim().Replace("\\", "/");
				url = string.Format(Core.Environment.Environment.RepoUrlFormat, path, line);
				return true;
			}
		}
		catch (Exception e)
		{
			return false;
		}
		return false;
	}
}

@if (Model is null)
{
	return;
}

<div class="details-content">
	<button class="button expandable"><span>Hide details</span></button>
	<h2 class="error-title">
		@HtmlEncodeAndReplaceLineBreaks(Model.Message)
	</h2>
	@if (Model is ReflectionTypeLoadException reflectionTypeLoadException)
	{
		if (reflectionTypeLoadException.LoaderExceptions?.Length > 0)
		{
			<h3>Loader Exceptions:</h3>
			<ul>
				@foreach (var ex in reflectionTypeLoadException.LoaderExceptions)
				{
					<li>@ex?.Message</li>
				}
			</ul>
		}
	}

	<div class="error-stack">
		<ul>
			@for (var exception = Model; exception != null && !string.IsNullOrEmpty(exception.StackTrace); exception = exception.InnerException)
			{
				<h3 class="stack-error">@(Model.Message == exception.Message ? "Exception stack trace:" : exception.Message)</h3>
				<li class="exception-stack">
					<ul>
						@foreach (var stackCall in exception.StackTrace!.Split("\n"))
						{
							if (stackCall == previousStackEnd)
							{
								<li class="stack-end">⇵ End of stack trace from previous location where exception was thrown ⇵</li>
								continue;
							}
							if (TryFindSource(stackCall, out var url))
							{
								<li class="stack-call">
									<a href="@url" target="_blank">@stackCall</a>
								</li>
								continue;
							}
							<li class="stack-call">@stackCall</li>
						}
					</ul>
				</li>
			}
		</ul>
	</div>
</div>