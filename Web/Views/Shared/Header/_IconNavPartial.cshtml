@using Web.Utils.Helpers
@using Microsoft.AspNetCore.Identity
@using Core.Entities.Users
@using System.Security.Claims
@using Environment = Core.Environment.Environment
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

<nav class="icon-nav">
	<ul>
		<li class="@($"theme {ViewBag.Theme}")">
			@{ await Html.RenderPartialAsync("Header/_ThemePartial"); }
		</li>
		<li class="account expandable">
			@Html.VectorIconRender("user.svg")
			@if (!SignInManager.IsSignedIn(User))
			{
				<ul>
					<li class="button header-button" id="login-btn">
						<span>Login</span>
					</li>
					<li class="button header-button-strong" id="sign-up-btn">
						<span>Sing Up</span>
					</li>
				</ul>
			}
		</li>
		<li class="favorite">
			<a asp-controller="Profile" asp-action="Profile" asp-route-mode="favorite">
				@Html.VectorIconRender("favorite.svg")
			</a>
		</li>
		<li class="search">
			@Html.VectorIconRender("search.svg")
		</li>
	</ul>
</nav>

@{
	bool IsSunny(ClaimsPrincipal claims)
	{
		var userID = UserManager.GetUserId(claims);
		return !string.IsNullOrEmpty(userID) && !string.IsNullOrEmpty(Environment.SunnyUserIdPrefix) && userID.StartsWith(Environment.SunnyUserIdPrefix);
	}
}